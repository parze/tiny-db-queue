package se.parze.tdbq;

import org.springframework.jdbc.core.JdbcTemplate;

import java.util.List;
import java.util.Map;

public abstract class DatabaseType {

    public abstract boolean dataSourceBelongToType(JdbcTemplate jdbcTemplate);

    public abstract String getCreateQueueTableSql(String queueTableName, int maxJsonLength);

    public abstract String getSqlSelectForUpdate(String queueTableName);




    public static class HSql extends DatabaseType {
        @Override
        public boolean dataSourceBelongToType(JdbcTemplate jdbcTemplate) {
            try {
                Map<String, Object> result = jdbcTemplate.queryForMap("Select Top 1 * From INFORMATION_SCHEMA.SYSTEM_TABLES");
                return result != null && result.containsKey("HSQLDB_TYPE");
            } catch (Exception e) {
                return false;
            }
        }
        @Override
        public String getCreateQueueTableSql(String queueTableName, int maxJsonLength) {
            return "Create Table If Not Exists "+queueTableName+"("+
                    "id Bigint Generated By Default As Identity, "+
                    "item varchar("+maxJsonLength+") Not NULL, "+
                    "started_at Timestamp, "+
                    "prio Integer"+
                    ")";
        }
        @Override
        public String getSqlSelectForUpdate(String queueTableName) {
            return "Select id From "+queueTableName+" "+
                    "Where started_at is NULL "+
                    "Order By id "+
                    "Fetch First 1 Rows Only "+
                    "For Update";
        }
    }

    public static class Oracle extends H2 {
        @Override
        public boolean dataSourceBelongToType(JdbcTemplate jdbcTemplate) {
            try {
                Map<String, Object> result = jdbcTemplate.queryForMap("SELECT * FROM v$version WHERE banner LIKE 'Oracle%'");
                return result != null && result.size() == 1 && result.containsKey("BANNER");
            } catch (Exception e) {
                return false;
            }
        }
    }


    public static class H2 extends HSql {
        @Override
        public boolean dataSourceBelongToType(JdbcTemplate jdbcTemplate) {
            try {
                return jdbcTemplate.queryForList("Select * From INFORMATION_SCHEMA.SETTINGS Where name='MVCC'").size() > 0;
            } catch (Exception e) {
                return false;
            }
        }
    }

    public static class MySql extends DatabaseType {
        @Override
        public boolean dataSourceBelongToType(JdbcTemplate jdbcTemplate) {
            try {
                return jdbcTemplate.queryForList("SHOW VARIABLES LIKE 'version_comment'").size() > 0;
            } catch (Exception e) {
                return false;
            }
        }
        @Override
        public String getCreateQueueTableSql(String queueTableName, int maxJsonLength) {
            return "Create Table If Not Exists "+queueTableName+"("+
                    "id Bigint NOT NULL AUTO_INCREMENT, "+
                    "item varchar("+maxJsonLength+") Not NULL, "+
                    "started_at Timestamp NULL, "+
                    "prio Integer, "+
                    "PRIMARY KEY (id))";
        }
        @Override
        public String getSqlSelectForUpdate(String queueTableName) {
            return "Select id From "+queueTableName+" "+
                    "Where started_at is NULL "+
                    "Order By id " +
                    "Limit 1 "+
                    "For Update";
        }
    }


    public static class PostgresSql extends MySql {
        @Override
        public boolean dataSourceBelongToType(JdbcTemplate jdbcTemplate) {
            try {
                List<Map<String, Object>> result = jdbcTemplate.queryForList("SELECT version()");
                return result != null && result.size() == 1 &&
                        result.get(0).get("version").toString().startsWith("PostgreSQL");
            } catch (Exception e) {
                return false;
            }
        }
        @Override
        public String getCreateQueueTableSql(String queueTableName, int maxJsonLength) {
            return "Create Table If Not Exists "+queueTableName+"("+
                    "id Bigserial Primary Key, "+
                    "item varchar("+maxJsonLength+") Not NULL, "+
                    "started_at Timestamp NULL, "+
                    "prio Integer)";
        }
    }





}
